syntax = "proto3";

package tutorial;

option java_package = "com.github.ebfhub.fastprotobuf.sample.proto";
option java_outer_classname = "SampleMessage";

message StringList {
    repeated string strings = 1;
}

message FieldSetDef {
    int32 fieldSetId = 1; // field number
    repeated int32 fieldIds = 2;
}
message FieldIdDef {
    int32 fieldId = 1; // field number
    string fieldName = 2; // field name
}

message NullValue {
}

message FieldAndValue {
    int32 fieldId = 1;            // field number
    oneof value {
        string _string = 3;
        int32 _int32 = 4;
        int64 _int64 = 5;
        bool _bool = 6;
        double _double = 7;
        float _float = 8;
        int32 _ts = 9;
        StringList _stringList = 10;
        NullValue _null = 11;
    } ;
};

message DataMessage {
  string symbol = 1;                        // String symbol
  int32 symbolId = 2;                       // Numeric equivalent (used for smaller msgs)
  int64 sourceTs = 3;                       // ms TS
  int32 messageId = 4;                      // Numeric incrementing message ID
  int64 sentTs = 5;                         // ms TS
  int32 fieldSetId = 7;                     // Set of fields
  FieldSetDef defineFieldSet = 8;           // Define of fields
  repeated FieldIdDef fieldIdDefs = 9;
  repeated FieldAndValue values = 10;
}

message SubscriberMessagePriority {
    repeated string symbols = 1;
    int32 pri = 2;
    int64 until = 3;
}

message SubscriberMessageSubscribe {
    repeated string symbols = 1;
    int32 pri = 2;
}
message SubscriberMessageQueueRate {
    double messagesPerSec = 1;
}

message SubscriberMessageFlow {
    int32 bytes = 1;
}
message SubscriberMessagePart {
    oneof value {
        SubscriberMessagePriority priority =1;
        SubscriberMessageSubscribe subscribe = 2;
        SubscriberMessageQueueRate queueRate = 3;
        SubscriberMessageFlow flow = 4;
    }
}

message SubscriberMessage {
    repeated SubscriberMessagePart messageParts = 1;
}


message AllTypes
{
    sint32 _sint32 = 1;
    sint64 _sint64 = 2;
    string _string = 3;
    int32 _int32 = 4;
    int64 _int64 = 5;
    bool _bool = 6;
    double _double = 7;
    float _float = 8;
    int32 _ts = 9;
    StringList _stringList = 10;
    NullValue _null = 11;

    fixed32 _fixed32 = 12;
    fixed64 _fixed64 = 13;
    uint32 _uint32 = 14;
    uint64 _uint64 = 15;

    sfixed32 _sfixed32 = 16;
    sfixed64 _sfixed64 = 17;

}

service MarketDataService {
    rpc SubscribeToMarketData(DataMessage) returns (stream DataMessage){}
}
